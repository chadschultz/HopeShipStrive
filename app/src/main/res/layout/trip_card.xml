<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    app:cardCornerRadius="8dp"
    app:cardElevation="4dp"
    tools:context=".MainActivity">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp">

        <!-- Instead of splitting `3:36p — 4:26p` into three TextViews, I could use one and use
        Spans to make sure part of it is formatted differently. Fewer Views are easier to
        render and easier to read. But separate TextViews have some advantages: more accurate
        previews, avoiding fragile and unintuitive code to format the UI, and more flexibility
        if the design changes (for example, to change the location of the views). That's
        why I went with separate Views. But in some situations - for example, the content
        needed to be translated as a whole - using a single TextView and some Spans would
        be preferable. -->
        <TextView
            android:id="@+id/pickupTimeTextView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textStyle="bold"
            tools:text="3:36p"
            app:layout_constraintHorizontal_chainStyle="spread_inside"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintEnd_toStartOf="@+id/pickupDropOffSeparatorTextView"/>

        <TextView
            android:id="@+id/pickupDropOffSeparatorTextView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="4dp"
            android:layout_marginEnd="4dp"
            android:text="@string/time_separator"
            app:layout_constraintStart_toEndOf="@+id/pickupTimeTextView"
            app:layout_constraintBaseline_toBaselineOf="@id/pickupTimeTextView"
            app:layout_constraintEnd_toStartOf="@+id/dropOffTimeTextView"/>

        <TextView
            android:id="@+id/dropOffTimeTextView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            tools:text="4:26p"
            app:layout_constraintHorizontal_chainStyle="spread_inside"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toEndOf="@id/pickupDropOffSeparatorTextView"
            app:layout_constraintEnd_toStartOf="@+id/riderTextView"/>

        <TextView
            android:id="@+id/riderTextView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="4dp"
            android:layout_marginEnd="8dp"
            android:textSize="12sp"
            tools:text="(3 riders • 1 booster)"
            app:layout_constraintHorizontal_bias="0"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintStart_toEndOf="@+id/dropOffTimeTextView"
            app:layout_constraintEnd_toStartOf="@+id/spacerView"
            app:layout_constraintBaseline_toBaselineOf="@+id/pickupTimeTextView"/>

        <!-- A spacer view isn't strictly necessary. We could allocate the extra space to one
        of the existing TextViews in the chain. Or we could set the horizontal bias on each
        of the chain elements to make sure a gap between elements was only used in one space.
        Or instead of a complete horizontal chain across the screen, we could simply have some
        views constrained to the start and a separate group constraints to the end - but then
        if the screen was exceptionally narrow or the contents exceptionally long, they could
        overlap each other. A spacer view avoids issues and is intuitive. -->
        <View
            android:id="@+id/spacerView"
            android:layout_width="0dp"
            android:layout_height="0dp"
            app:layout_constraintStart_toEndOf="@+id/riderTextView"
            app:layout_constraintEnd_toStartOf="@+id/estEarningsLabelTextView"
            app:layout_constraintTop_toTopOf="parent"/>

        <TextView
            android:id="@+id/estEarningsLabelTextView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="@color/colorPrimary"
            android:textSize="11sp"
            android:text="@string/estimated_earnings_trip_card"
            app:layout_constraintHorizontal_bias="1"
            app:layout_constraintStart_toEndOf="@+id/spacerView"
            app:layout_constraintBaseline_toBaselineOf="@+id/estEarningsValueTextView"
            app:layout_constraintEnd_toStartOf="@+id/estEarningsValueTextView"/>

        <TextView
            android:id="@+id/estEarningsValueTextView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="4dp"
            android:textColor="?attr/colorPrimary"
            tools:text="$30.54"
            app:layout_constraintHorizontal_bias="1"
            app:layout_constraintStart_toEndOf="@+id/estEarningsLabelTextView"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintEnd_toEndOf="parent"/>

        <TextView
            android:id="@+id/waypointsTextView"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:textSize="16sp"
            tools:text="1. 1 World Way, Los Angeles 90045\n2. 3345 Wilshire Blvd, Los Angeles 90005"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/pickupTimeTextView"
            app:layout_constraintEnd_toEndOf="parent"/>

    </androidx.constraintlayout.widget.ConstraintLayout>

</androidx.cardview.widget.CardView>